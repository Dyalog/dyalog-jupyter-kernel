{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"About","text":""},{"location":"#what-are-jupyter-notebooks","title":"What are Jupyter notebooks?","text":"<p>A Jupyter notebook document combines an interactive coding session with narrative text according to Donald Knuth's literate programming paradigm.</p> <p>This is a nice format for teaching APL, explaining algorithms, and sharing ideas. The consumer of a notebook can experiment with the code, and make changes to the text and republish the notebook.</p>"},{"location":"#what-is-the-dyalog-jupyter-kernel","title":"What is the Dyalog Jupyter kernel?","text":"<p>Jupyter originated as a system for use with the Julia, Python and R programming languages (JuPyteR). To use the system with other programming languages, an interface between the Jupyter system and the language system (compiler, interpreter and what have you) is required. This interface is the language kernel.</p>"},{"location":"#how-do-i-use-jupyter-notebooks","title":"How do I use Jupyter notebooks?","text":"<p>Jupyter notebook documents can be used in the following ways:</p> <ul> <li>You can install the Jupyter system locally on your machine to write and interactively use notebooks - this means that you can edit the text and execute the code examples within the notebooks.</li> <li>View the notebooks and execute the code online in a dedicated sandboxed environment.</li> <li>View or share the notebook as a static document, for example using nbviewer.</li> <li> <p>Export notebooks to widely supported formats, such as HTML or PDF, in local offline usage or in Binder.  </p> <p>Open the File menu, click on Download as and select format. Note that some target formats may require installation of third party tools.</p> </li> </ul>"},{"location":"install/","title":"Install and use locally","text":"<p>Dyalog version 15.0 or later and Python version 3.8+, and the jupyterlab Python package must be installed in order to use the Dyalog Jupyter kernel.</p> <p>Installing, operating and maintaining a Python installation can be a bit of a chore, especially if you're not a Python developer. If you're coming to this wanting only to use Jupyter for Dyalog APL, here are some step by step instructions for how to set up the whole tool chain from scratch. </p> <p>If you're a Python developer, or if you're already using a \"canned\" Python distribution, like conda, you probably know what you're doing and can skip this document.</p> <p>The below instructions show how to install Jupyter and the Dyalog kernel inside a Python \"virtual environment\". This means that you can keep your Jupyter work separate from any other Python work, current or future. This is usually a good idea when working with Python.</p> <ol> <li>Download and install the Dyalog interpreter. </li> <li>Download, and run the official Python installer. Ensure you select <code>Use admin privileges to install Python</code>, <code>Add python.exe to PATH</code>, and <code>Disable PATH limit</code>.</li> <li>Open a  terminal (e.g. PowerShell if you're on Windows). Type the following steps into the terminal window.</li> <li>Create a virtual Python environment with a name of your choosing, e.g.     <pre><code>python -m venv jupy312\n</code></pre></li> <li>Activate the virtual environment -- this is important:     <pre><code>jupy312\\Scripts\\activate # Windows\n. jupy312/bin/activate   # linux, macOS. Note leading dot.\n</code></pre>     Your terminal prompt should change to have a <code>(jupy312)</code> prefix.</li> <li>[Optional, but recommended] Upgrade <code>pip</code> to the latest version:     <pre><code>python.exe -m pip installl --upgrade pip # Windows\npython -m pip installl --upgrade pip     # linux, macOS\n</code></pre></li> <li>Install <code>jupyterlab</code>:     <pre><code>pip install jupyterlab\n</code></pre></li> <li>Install the Dyalog kernel Python module:     <pre><code>pip install dyalog-jupyter-kernel\n</code></pre></li> <li>Register the kernel with Jupyter:     <pre><code>python -m 'dyalog_kernel' install\n</code></pre></li> <li>Start jupyterlab (or notebook):     <pre><code>cd path/to/my/notebooks/\njupyter lab # or jupyter notebook\n</code></pre></li> </ol> <p>Jupyter lab (and notebook) uses a web interface. It has a drop-down button labeled New\u25be where you can choose to create a new Dyalog APL notebook. You can also navigate to and click on any existing notebook (a file with the <code>.ipynb</code> extension) to open it.</p>"},{"location":"install/#troubleshooting","title":"Troubleshooting","text":""},{"location":"install/#python-is-not-found","title":"Python is not found","text":"<p>If you get the message <pre><code>python : The term 'python' is not recognized as the name of a cmdlet, function,  script file, or operable program.\n</code></pre> Run the installer again. Make sure to tick Add Python to environment variables</p>"},{"location":"install/#cannot-assign-requsted-address","title":"Cannot assign requsted address","text":"<p>If you get the message <code>OSError: [Errno 99] Cannot assign requested address</code> try: <code>jupyter-notebook --ip=0.0.0.0 --port=8080</code> or some other port number.</p>"},{"location":"install/#entering-apl-characters","title":"Entering APL characters","text":"<p>You can get an APL language bar and enable key-bindings and character compositions using just a a bookmarklet (a browser bookmark that contains commands which add new features to the browser). After adding the bookmarklet to your language bar, and opening a Jupyter notebook document in your browser, click on the bookmarklet. You can now insert APL characters in three ways:</p> <ol> <li>Click a symbol on the language bar.</li> <li>Type Backtick (<code>`</code>) and then the associated symbol (hover over symbols on the language bar to see associations), e.g. Backtick+r makes <code>\u2374</code> and Backtick+Shift+e makes <code>\u2377</code>.</li> <li>Type two symbols which roughly make up the APL symbol, then press the Tab key to combine them. The two symbols are chosen to be easy to guess according to one of the following systems:<ol> <li>The symbols roughly make up the APL symbol when overlaid. For example, <code>O-</code> Tab makes <code>\u2296</code> and <code>A|</code>Tab  makes <code>\u234b</code>.</li> <li>The symbols roughly make up the APL symbol when juxtaposed. For example, <code>&lt;&gt;</code> Tab makes <code>\u22c4</code> and <code>[]</code> Tab makes <code>\u2395</code></li> <li>The symbols are identical, and are visually similar to the APL symbol. For example, <code>ee</code> makes <code>\u220a</code> and <code>xx</code> makes <code>\u00d7</code>.</li> </ol> </li> </ol>"},{"location":"online/","title":"Use without installing anything","text":"<p>Jupyter notebooks can be viewed and interacted with online in a sandboxed environment.</p>"},{"location":"online/#using-tryapl","title":"Using TryAPL","text":"<ol> <li> <p>Click on TryAPL's Learn tab.</p> </li> <li> <p>Select tutorial (or enter the URL of an online Jupyter notebook document.<sup>Coming soon!</sup>)</p> </li> <li> <p>Click Next to proceed through the tutorial steps.</p> </li> <li> <p>At any time, you may click on APL expressions in the tutorial pane to re-insert them in the session pane, or press the up arrow key to recall previous statements.</p> </li> </ol>"},{"location":"online/#using-binder","title":"Using Binder","text":"<ol> <li> <p>Add a Dockerfile to your Git repository (with the name Dockerfile) which uses the following template:</p> <pre><code>FROM rikedyp/dyalog-jupyter-binder:49 # This Docker container is a Dyalog Jupyter environment\nCOPY ./NotebookFolder/ ${HOME}        # NotebookFolder is a folder containing notebooks\nADD ./MyNotebook.ipynb ${HOME}        # MyNotebook.ipynb is an individual notebook\n</code></pre> </li> <li> <p>Go to mybinder.org and paste your repository URL</p> </li> <li>Click the <code>launch</code> button</li> </ol> <p>If you are not already able to enter APL characters, try the bookmarklet.</p>"},{"location":"write/","title":"Writing notebook content","text":"<p>Note: These are about writing notebooks on a locally installed Jupyter system.</p>"},{"location":"write/#editing-and-creating-cells","title":"Editing and creating cells","text":"<p>Click on any code cell to begin editing it, then press Ctrl+Enter to execute the code.</p> <p>Use the <code>\u2795\ufe0e</code> button to insert a new code cell. You can switch a cell contain explanations, comments, etc. by selecting Markdown from the drop-down saying Code\u2228. Additional commands can be found by clicking the <code>\u2328\ufe0e</code> button.</p>"},{"location":"write/#defining-functions","title":"Defining functions","text":"<p>Single-line dfns and tacit functions may be defined among other code in a code cell:</p> <pre><code>AddNext\u2190{\u2375,+/\u00af2\u2191\u2375}\nFibonacci\u2190AddNext/\u233d\u2218\u2373\nFibonacci 10\n</code></pre> <p>Note: Tradfns; multi-line dfns; and scripted :Namespaces, :Classes and :Interfaces must be defined in a single code cell.</p> <p>Tradfns may be defined in a code cell by beginning the first line with a <code>\u2207</code> and having a sole <code>\u2207</code> after the last line:</p> <pre><code>\u2207Greet name\n \u2395\u2190'Hello, ',name\n\u2207\n</code></pre> <p>To define a multi-line dfn, begin a code cell with the line <code>]dinput</code>. For example:</p> <pre><code>]dinput\nroot\u2190{\n    \u237a\u21902\n    \u2375*\u00f7\u237a\n}\n</code></pre> <p>To define a scripted :Namespace, :Class or :Interface, begin and end the code cell with the corresponding :Keyword and :EndKeyword. For example; <pre><code>:Namespace myns\n  \u2207Greet name\n   \u2395\u2190'Hello, ',name\n  \u2207\n:EndNamespace\n</code></pre></p>"},{"location":"write/#rich-content","title":"Rich content","text":"<p>You can indicate that the result of a statement should be rendered as HTML by using the <code>]html</code> user command:</p> <pre><code>p\u2190'&lt;p&gt;Please:&lt;/p&gt;'\nb\u2190'&lt;button onclick=\"alert(''Thank you!'')\"&gt;Click&lt;/button&gt;'\n]html p,b\n</code></pre> <p>You can plot data with with the <code>]plot</code> user command: <pre><code>x\u2190(\u2373100)\u00f720\ny\u2190(\u22a2*\u00f7)x\n]plot y x\n</code></pre></p> <p>Choose chart type with the <code>-type=</code> modifier:</p> <pre><code>]plot 3 1 4 1 6 -type=pie\n</code></pre>"}]}